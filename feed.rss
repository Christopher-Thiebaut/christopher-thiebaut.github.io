<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>christopherthiebaut.com</title><description>Chris Thiebaut's blog</description><link>http://christopherthiebaut.com</link><language>en</language><lastBuildDate>Tue, 22 Jul 2025 22:36:38 -0400</lastBuildDate><pubDate>Tue, 22 Jul 2025 22:36:38 -0400</pubDate><ttl>250</ttl><atom:link href="http://christopherthiebaut.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">http://christopherthiebaut.com/posts/weak_in_protocol_extensions</guid><title>Tip: How To weakly reference self in protocol extensions that are not class-bound</title><description>How to use weak self in protocol extensions</description><link>http://christopherthiebaut.com/posts/weak_in_protocol_extensions</link><pubDate>Tue, 6 Dec 2022 22:32:00 -0500</pubDate><content:encoded><![CDATA[<h1>Tip: How To weakly reference <code>self</code> in protocol extensions that are not class-bound</h1><p>As any iOS developer can tell you, it's often important to use <code>weak</code> in closures to break refernce cycles and avoid memory leaks. Unfortunately, using <code>weak</code> is not always directly possible in protocol extensions that are not class-bound. Suppose you have a protocol for an API client to fetch some information:</p><pre><code><span class="keyword">protocol</span> APIClient {
    <span class="keyword">func</span> fetchData() <span class="keyword">async throws</span> -&gt; <span class="type">Data</span>
}
</code></pre><p>Unfortunately, not all of your code is ready to rely on async/await exclusively for concurrency so you may want to also expose a <code>Combine</code> compatible interface:</p><pre><code><span class="keyword">protocol</span> APIClient {
    <span class="keyword">func</span> fetchData() <span class="keyword">async throws</span> -&gt; <span class="type">Data</span>
    <span class="keyword">func</span> fetchDataPublisher() -&gt; <span class="type">Future</span>&lt;<span class="type">Data</span>, <span class="type">Error</span>&gt;
}
</code></pre><p>At a glance, it's obvious these two protocol requirements are redundant and conforming types shouldn't have to provide two implementations to solve the same problem. We can solve this by providing a default implementation of the <code>Combine</code> interface:</p><pre><code><span class="keyword">extension</span> <span class="type">APIClient</span> {
    <span class="keyword">func</span> fetchDataPublisher() -&gt; <span class="type">Future</span>&lt;<span class="type">Data</span>, <span class="type">Error</span>&gt; {
        <span class="keyword">return</span> <span class="type">Future</span> { promise <span class="keyword">in</span>
            <span class="type">Task</span> {
                <span class="keyword">do</span> {
                    <span class="keyword">let</span> data = <span class="keyword">try await</span> <span class="call">fetchData</span>()
                    <span class="call">promise</span>(.<span class="call">success</span>(data))
                } <span class="keyword">catch</span> {
                    <span class="call">promise</span>(.<span class="call">failure</span>(error))
                }
            }
        }
    }
}
</code></pre><p>Unfortunately, the above may cause unexpected behavior. Even if implementations of <code>APIClient</code> choose to implement <code>fetchData</code> in a way that does not strongly reference <code>self</code>, the <code>Combine</code> compatible implementation will still retain <code>self</code> for the lifetime of the API call.</p><p>Unfortunately, it's not possible to simply add <code>[weak self]</code> into the closure because we cannot guarantee that <code>self</code> is a reference type that can be referenced weakly. Instead we get a build error suggesting we limit the protocol to a class:</p><pre><code>'<span class="keyword">weak</span>' must not be applied to non-<span class="keyword">class</span>-bound '<span class="type">Self</span>'; consider adding a <span class="keyword">protocol</span> conformance that has a <span class="keyword">class</span> bound
</code></pre><p>While this may be a perfectly good general solution, it's not a good solution here. There's no fundamental difference in the logic we want to use for reference types vs value types. So we need a workaround to weakly reference classes that won't cause errors value types.</p><p>Fortunately, the solution is quite simple:</p><pre><code><span class="keyword">struct</span> WeakBox&lt;T&gt; {
    <span class="keyword">var</span> object: <span class="type">T</span>? {
        <span class="keyword">get</span> { storage <span class="keyword">as</span>? <span class="type">T</span> }
        <span class="keyword">set</span> { storage = newValue <span class="keyword">as</span> <span class="type">AnyObject</span> }
    }
    <span class="keyword">weak private var</span> storage: <span class="type">AnyObject</span>?
    
    <span class="keyword">init</span>(<span class="keyword">_</span> stored: <span class="type">T</span>) {
        <span class="keyword">self</span>.<span class="property">object</span> = stored
    }
}
</code></pre><p><code>WeakBox</code> casts the stored value to <code>AnyObject</code> so we can always use reference semantics, even if the provided object is actually a value type. (We can unconditionally cast <code>as AnyObject</code> because of the some <a href="https://forums.swift.org/t/value-type-is-anyobject-why/15290/2">Objective C interoperability requirements</a>.)<br><br>Fortunately, the casting a value type as <code>AnyObject</code> does not cause it to be deallocated, as proved by the following pair of unit tests.</p><pre><code><span class="keyword">final class</span> WeakCaptureTests: <span class="type">XCTestCase</span> {
    <span class="keyword">func</span> test_doesNotRetainClass() <span class="keyword">throws</span> {
        <span class="keyword">class</span> Example {}
        <span class="keyword">let</span> subject = <span class="type">WeakBox</span>(<span class="type">Example</span>())
        <span class="call">XCTAssertNil</span>(subject.<span class="property">object</span>)
    }
    
    <span class="keyword">func</span> test_doesRetainStructs() <span class="keyword">throws</span> {
        <span class="keyword">let</span> subject = <span class="type">WeakBox</span>(<span class="number">42</span>)
        <span class="call">XCTAssertEqual</span>(subject.<span class="property">object</span>, <span class="number">42</span>)
    }
}
</code></pre><p><code>WeakBox</code> allows us to appropriately leave the decision of whether or not to retain <code>self</code> up to implementations of <code>APIClient</code> rather than our default implementation without duplicating the implementation or restricting it to <code>AnyObject</code>:</p><pre><code><span class="keyword">struct</span> APIClientDeallocated: <span class="type">Error</span> {}
<span class="keyword">extension</span> <span class="type">APIClient</span> {
    <span class="keyword">func</span> fetchDataPublisher() -&gt; <span class="type">Future</span>&lt;<span class="type">Data</span>, <span class="type">Error</span>&gt; {
        <span class="keyword">let</span> weakReference = <span class="type">WeakBox</span>(<span class="keyword">self</span>)
        <span class="keyword">return</span> <span class="type">Future</span> {  promise <span class="keyword">in</span>
            <span class="type">Task</span> {
                <span class="keyword">do</span> {
                    <span class="keyword">guard let</span> data = <span class="keyword">try await</span> weakReference.<span class="property">object</span>?.<span class="call">fetchData</span>() <span class="keyword">else</span> {
                        <span class="keyword">throw</span> <span class="type">APIClientDeallocated</span>()
                    }
                    <span class="call">promise</span>(.<span class="call">success</span>(data))
                } <span class="keyword">catch</span> {
                    <span class="call">promise</span>(.<span class="call">failure</span>(error))
                }
            }
        }
    }
}
</code></pre><p>Hopefully this has been interesting and useful. Please feel free to reach out on <a href="https://www.linkedin.com/in/christopherthiebaut/">LinkedIn</a> if you have any questions or comments.</p>]]></content:encoded></item><item><guid isPermaLink="true">http://christopherthiebaut.com/posts/weak_delegate_capture_list_gotcha</guid><title>Tip: How to avoid unexpected behavior when capturing Optionals</title><description>Tip: How to avoid unexpected behavior when capturing `Optional`s</description><link>http://christopherthiebaut.com/posts/weak_delegate_capture_list_gotcha</link><pubDate>Wed, 25 Aug 2021 20:00:00 -0400</pubDate><content:encoded><![CDATA[<h1>Tip: How to avoid unexpected behavior when capturing <code>Optional</code>s</h1><p>Swift's <code>Optional</code> type is one of the defining features of the language. Given the amount of language features and syntactic sugar that are built around <code>Optional</code>, it is easy to forget that there even is such a type.<br><br>Normally, it's a good thing for a language feature to get out of your way. But when it comes to closure capture lists, it's important to remember that an optional is a value type regardless of what the wrapped type is.</p><p>Consider the following example code:</p><pre><code><span class="keyword">class</span> ExampleViewController: <span class="type">UIViewController</span> {
    <span class="keyword">weak var</span> delegate: <span class="type">ExampleViewControllerDelegate</span>?
}
</code></pre><p>It is easy to look at the above code and think of <code>delegate</code> as being an <code>ExampleViewControllerDelegate</code> which may or may not be present. But that thinking will lead you astray if you try to need to use an optional in a closure capture list. Expanding on the previous example (assuming it was executed in a Playground):</p><pre><code><span class="keyword">class</span> ExampleViewControllerDelegate {
    <span class="keyword">var</span> delegateMethodCalled = <span class="keyword">false
    
    func</span> delegateMethod() {
        delegateMethodCalled = <span class="keyword">true</span>
    }
}

<span class="keyword">class</span> ExampleViewController : <span class="type">UIViewController</span> {
    <span class="keyword">weak var</span> delegate: <span class="type">ExampleViewControllerDelegate</span>?
    
    <span class="keyword">override func</span> viewDidLoad() {
        <span class="call">viewDidLoad</span>()
        <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTask</span>(with: exampleURL) { [delegate] <span class="keyword">_</span>, <span class="keyword">_</span>, <span class="keyword">_ in</span>
            delegate?.<span class="call">delegateMethod</span>()
        }.<span class="call">resume</span>()
    }
}

<span class="keyword">let</span> vc = <span class="type">ExampleViewController</span>()
<span class="keyword">_</span> = vc.<span class="property">view</span>
<span class="keyword">let</span> delegate = <span class="type">ExampleViewControllerDelegate</span>()
vc.<span class="property">delegate</span> = delegate

<span class="call">print</span>(delegate.<span class="property">delegateMethodCalled</span>)
</code></pre><p>What do we suppose will happen when the code above executes? Surely the delegate will be set <em>before</em> the <code>URLSession</code> callback is called. So intuitively, we'd expect it to print <code>true</code>. But that's because we're thinking about <code>delegate</code> as a reference type when it's actually a value type.</p><p>When the closure is created, <code>delegate</code> is <code>nil</code> so we actually capture the enum case <code>Optional&lt;ExampleViewControllerDelegate&gt;.none</code>. Since enums are value types, this will not get updated when the view controller's delegate gets set.</p><p>The simplest way to avoid bugs like that would be to use an actual reference type in your capture lists if you're expecting the closure to have the latest value when it is called. In the case of your example, that would be:</p><pre><code>     <span class="keyword">override func</span> viewDidLoad() {
        <span class="call">viewDidLoad</span>()
        <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTask</span>(with: exampleURL) { [<span class="keyword">weak self</span>] <span class="keyword">_</span>, <span class="keyword">_</span>, <span class="keyword">_ in
            self</span>?.<span class="property">delegate</span>?.<span class="call">delegateMethod</span>()
        }.<span class="call">resume</span>()
    }
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">http://christopherthiebaut.com/posts/exclude_swiftui_previews_from_code_coverage</guid><title>How to exclude SwiftUI Previews From Code Coverage Percentage</title><description>How to exclude SwiftUI Previews From Code Coverage Percentage</description><link>http://christopherthiebaut.com/posts/exclude_swiftui_previews_from_code_coverage</link><pubDate>Mon, 25 Jan 2021 14:07:00 -0500</pubDate><content:encoded><![CDATA[<h1>How to exclude SwiftUI Previews From Code Coverage Percentage</h1><p>TL;DR: Create a new scheme and compiler flag for your tests.</p><h2>THE PROBLEM:</h2><p>SwiftUI previews are great and can give you fantastic iteration speed when changing your app’s views. But what about the test coverage that gives you a high level of confidence to iterate quickly on your app itself? While you can test SwiftUI views <a href="https://nalexn.github.io/swiftui-unit-testing/">by digging into their internals</a> (not recommended as those tests may break in future SwiftUI versions) or with high level XCUI tests, you should not spend time unit testing SwiftUI previews because they’re not part of your app’s code.</p><p>The fact that SwiftUI previews generally are defined inline in the file with the view is great for development speed, but starts to become a problem if you use Xcode’s code coverage reports to track and ensure that you’re maintaining a high level of test coverage for your project. SwiftUI Previews show up as uncovered code, and suddenly you no longer expect to see code coverage reported at or near 100% and it becomes easier to let code coverage slip for actual production code. Alternatively, you may waste time digging in to find what code is uncovered — and repeatedly find out that it’s just previews instead of “real” code.</p><h2>THE SOLUTION:</h2><p>Fortunately, there’s a solution and it’s quick and easy. We just have to create a new build configuration for our tests that does not build the previews. So we start of with something like this:</p><img src="http://christopherthiebaut.com/low_test_coverage.png" alt="image of a project with 79.5% test coverage"/><p>Since this (relatively simple) app was created with TDD, the reported test coverage is relatively good, but deceptively low due to SwiftUI previews.</p><p>To create a new configuration, go to the <code>Info</code> tab of your project settings and duplicate the <code>Debug</code> configuration.</p><img src="http://christopherthiebaut.com/duplicate_debug_configuration.gif" alt="GIF showing duplicating the debug configuration"/><p>Believe it or not, you’re already almost done. Next, we need to add an active compilation condition (a compiler flag to go along with the new scheme.</p><img src="http://christopherthiebaut.com/create_active_compilation_condition.gif" alt="GIF showing creating an active compilation condition"/><p>Now, set the new build configuration as the configuration for your tests:</p><img src="http://christopherthiebaut.com/set_build_configuration_for_tests.gif" alt="GIF showing how to set build configuration for tests"/><p>At this point, all you have left to do is surround your SwiftUI previews with the same <code>#if DEBUG</code> compiler directives that were the default when SwiftUI was brand new (back then, it was because the compiler wasn’t quite so good at optimizing them out of release builds). Alternatively, you could surround them with <code>#if !TESTING</code>. Either way, it’s important to make sure you have at least one application level test (like an XCUITest) that ensures you can’t use these compiler directives to exclude any production code without your test build failing.</p><p>For example:</p><pre><code><span class="preprocessing">#if DEBUG</span>
<span class="keyword">struct</span> RestartOverlay_Previews: <span class="type">PreviewProvider</span> {
    <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Group</span> {
            <span class="type">RestartOverlay</span>(gameEnd: .<span class="dotAccess">draw</span>, restart: {})
                .<span class="call">border</span>(<span class="type">Color</span>.<span class="property">orange</span>, width: <span class="number">2</span>)
            <span class="type">RestartOverlay</span>(gameEnd: .<span class="call">winner</span>(.<span class="dotAccess">o</span>), restart: {})
                .<span class="call">border</span>(<span class="type">Color</span>.<span class="property">orange</span>, width: <span class="number">2</span>)
            <span class="type">RestartOverlay</span>(gameEnd: .<span class="call">winner</span>(.<span class="dotAccess">x</span>), restart: {})
                .<span class="call">border</span>(<span class="type">Color</span>.<span class="property">orange</span>, width: <span class="number">2</span>)
        }
    }
}
<span class="preprocessing">#endif</span>
</code></pre><p>Thanks for reading, I hope this was helpful and informative.</p>]]></content:encoded></item></channel></rss>